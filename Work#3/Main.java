// Урок 4. Структуры данных дерево и хэш-таблица

// Задание:
// Необходимо преобразовать собранное на семинаре дерево поиска в полноценное левостороннее красно-чёрное дерево. 
// Реализовать метод добавления новых элементов с балансировкой.
// - Красно-чёрное дерево имеет следующие критерии:
// - Каждая нода имеет цвет (красный или черный);
// - Корень дерева всегда черный;
// - Новая нода всегда красная;
// - Красные ноды могут быть только левым дочерним элементом;
// - У красной ноды все дочерние элементы черного цвета.

// Соответственно, чтобы данные условия выполнялись, после добавления элемента в дерево необходимо произвести балансировку, 
//благодаря которой все критерии выше станут валидными.

// Для балансировки существует 3 операции:
// - левый малый поворот
// - правый малый поворот
// - смена цвета.

public class Main {
    public static void main(String[] args) {
        RedBlackTree<Integer, String> tree = new RedBlackTree<>();

        // Вставка элементов в дерево
        tree.put(1, "Five");
        tree.put(2, "Three");
        tree.put(3, "Eight");

        // Проверка, содержит ли дерево ключи
        System.out.println("Does the tree contain key? " + (tree.get(1) != null));
        System.out.println("Does the tree contain key? " + (tree.get(2) != null));

        // Дополнительная проверка
        tree.put(4, "Four");
        System.out.println("Does the tree contain key 4 now? " + (tree.get(4) != null));
    }
}
